% Определяем предикат для печати нечетных чисел в порядке убывания
print_odd_numbers(Lower, Upper) :-
    Upper >= Lower,  % Проверка, что верхняя граница >= нижней
    (   Upper mod 2 =:= 0 -> Upper1 is Upper - 1 ; Upper1 is Upper % Если Upper четное, уменьшаем на 1
    ),
    print_odd(Upper1, Lower).  % Вызов вспомогательного предиката для печати

% Вспомогательный предикат для печати нечетных чисел
print_odd(Current, Lower) :-
    Current >= Lower,  % Проверка, что текущее число >= нижней границы
    writeln(Current),  % Печать текущего числа
    Next is Current - 2,  % Переход к следующему нечетному числу
    print_odd(Next, Lower).  % Рекурсивный вызов предиката

print_odd(Current, Lower) :- 
    Current < Lower,   % Если текущее число меньше нижней границы, завершить
    !.  % "Cut" для завершения предиката

% начальный предикат для запуска программы
start :- 
    write('Введите нижнюю границу: '), flush_output(current_output), % Запрос у пользователя на ввод нижней границы
    read(Lower),  % Чтение нижней границы
    write('Введите верхнюю границу: '), flush_output(current_output), % Запрос у пользователя на ввод верхней границы
    read(Upper),  % Чтение верхней границы
    (   Lower > Upper -> 
        writeln('Ошибка: Нижняя граница больше верхней. Попробуйте снова.'), 
        start  % Повторный вызов start в случае ошибки
    ;
        print_odd_numbers(Lower, Upper)  % Печать нечетных чисел
    ).